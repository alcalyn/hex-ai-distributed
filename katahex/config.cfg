## Modify according to your own computer ##
# Number of threads to use in search
numSearchThreads = 16

## Modify according to your own computer ##
# Hash table cache size
# Approximately 1M calculations per 1G of memory. In other words, it has a consolidating effect on calculations below 1M (1M=1000k=1000000). If the total calculation does not exceed 200k (for most low-end machines), a 1M node hash table is sufficient. If you want to run in the background, it is recommended to increase it.
# The numbers represent powers of 2. For example, 20 corresponds to 2**20 calculations, which is approximately 1M.
# 19: Memory 500M, Calculation 500k
# 20: Memory 1G, Calculation 1M
# 21: Memory 2G, Calculation 2M
# 22: Memory 4G, Calculation 4M
# 23: Memory 8G, Calculation 8M
# 24: Memory 16G, Calculation 16M
# 25: Memory 32G, Calculation 32M
# Set this to 0 when testing speed, then test for a balanced situation. This is because caching can result in artificially high and unstable speeds.
nnCacheSizePowerOfTwo = 21

## Multi-card settings ##
numNNServerThreadsPerModel = 1 # Number of graphics cards to use

gpuToUseThread0 = 0 # ID of the 1st graphics card to use
gpuToUseThread1 = 1 # ID of the 2nd graphics card to use  
gpuToUseThread2 = 2 # ID of the 3rd graphics card to use
gpuToUseThread3 = 3 # ID of the 4th graphics card to use

## Not recommended to modify below ##
# -------------------------------------------------------

# Graph search
useGraphSearch=true

## Search parameters ##
cpuctExploration = 0.9
cpuctExplorationLog = 0.6
cpuctExplorationBase=500
useNoisePruning=true

nnPolicyTemperature=1.1 # Slightly broader
subtreeValueBiasFactor=0.0 # Tested, not very useful, so turned off. Default is 0.35

## Winning rate when it's a draw ##
# 0 represents a draw with a 50% winning rate, 1 represents a draw counted as a white win, -1 represents a draw counted as a black win.
# Adjusting this might help find winning moves (just a speculation, not very certain). For example, when looking for a black win, you can set it to 0.5~1, when looking for a white win, you can set it to -0.5~-1, and set it to 0 for normal use. Don't forget to change it back after use.
# Only used for internal calculations. The display still shows a draw as 50%.
noResultUtilityForWhite =0.0

## Maximum length of variation graph ##
# No need to change, as it can also be changed in Lizzie
analysisPVLen=100

## Miscellaneous default content ##
logDir = gtp_logs    # Each run of KataGo will log to a separate file in this dir

logAllGTPCommunication = true
logSearchInfo = true
logToStderr = false

taxRule = NONE  # options: NONE, SEKI, ALL

allowResignation = false
resignThreshold = -0.90
resignConsecTurns = 3

# dynamicPlayoutDoublingAdvantageCapPerOppLead = 0

playoutDoublingAdvantage = 0.0 # PDA
playoutDoublingAdvantagePla = WHITE

# Number of seconds to buffer for lag for GTP time controls - will move a bit faster assuming there is this much lag per move.
lagBuffer = 1.0

ponderingEnabled = true
maxTimePondering = 120

# Play a little faster if the opponent is passing, for friendliness
searchFactorAfterOnePass = 0.50
searchFactorAfterTwoPass = 0.25
# Play a little faster if super-winning, for friendliness
searchFactorWhenWinning = 0.40
searchFactorWhenWinningThreshold = 0.95

# nnMaxBatchSize = <integer> # default

# Size of mutex pool for nnCache is (2 ** this).
nnMutexPoolSizePowerOfTwo = 19

# mutexPoolSize = 16384
